DropDown LIst:

bool valuefirst = false;
bool valuesecond = false;

Scaffold(
      body: Container(
        child: Column(
          children: [
            Row(
              children: [

                Checkbox(value: this.valuefirst, onChanged: (bool? value)
                {
                  setState(() {
                    this.valuefirst = value!;
                  });
                }
                ),Text('Harsh'),

              ],
            ),
            Row(
              children: [

                Checkbox(value: this.valuefirst, onChanged: (bool? value)
                {
                  setState(() {
                    this.valuefirst = value!;
                  });
                }
                ),Text('Maitri'),

              ],
            )

          ],
        ),



CONTAINER :

                        Container(height:50,color: Colors.amber,),
                        Container(height:50,color: Colors.amber,),
                        Container(height:50,color: Colors.amber,),
                        Container(height:50,color: Colors.amber,),
                        Container(height:50,color: Colors.amber,),
                        Container(height:50,color: Colors.lightBlue,),
                        Container(height:50,color: Colors.lightBlue,),
                        Container(height:50,color: Colors.black45,),

PagView:
             import 'package:flutter/material.dart';

             class pageview extends StatefulWidget {
               @override
               State<pageview> createState() => _pageviewState();
             }

             class _pageviewState extends State<pageview> {
               @override
               Widget build(BuildContext context) {
                 return Container();
               }
             }

             class PageView extends StatefulWidget {
               const PageView(
                   {Key? key,
                   required PageController controller,
                   required List<dynamic> children})
                   : super(key: key);

               @override
               State<PageView> createState() => _PageViewState();
             }

             class _PageViewState extends State<PageView> {
               final PageController _controller = PageController(initialPage: 0);

               @override
               void dispose() {
                 _controller.dispose();
                 super.dispose();
               }

               @override
               Widget build(BuildContext context) {
                 return PageView(
                   controller: _controller,
                   children: [
                     Container(
                       color: Colors.blue,
                     ),
                     Container(
                       color: Colors.green,
                     ),
                     Container(
                       color: Colors.orange,
                     )
                   ],
                 );
               }
             }

Drawer:

 Drawer(
        child: SafeArea(
          child: Column(
            children: [
              Container(
                alignment: Alignment.topCenter,
                padding: EdgeInsets.only(bottom: 40),
                child: Image.asset("image/flutter.png"),
              ),
              Padding(
                padding: EdgeInsets.only(top: 8.0),
                child: Container(
                  color: Colors.cyan[10],
                  child: Column(
                    children: [
                      // TextButton(
                      //     onPressed: () {
                      //       Navigator.of(context).push(MaterialPageRoute(
                      //           builder: (context) => list()));
                      //     },
                      //     child: Text('setting')),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),

      Bell:

      import 'package:flutter/material.dart';

      class bell extends StatefulWidget {
        const bell({Key? key}) : super(key: key);

        @override
        State<bell> createState() => _bellState();
      }

      class _bellState extends State<bell> {
        @override
        Widget build(BuildContext context) {
          return Scaffold(
            body: SafeArea(
              child: Align(
                alignment: Alignment.center,
                child: Stack(

                  children: [
                    Expanded(
                      child: Container(
                        height: double.infinity,
                        width: double.infinity,
                        child: Image.asset('image/without.jpeg',

                        ),
                      ),
                    ),
                    Positioned(

                      bottom: 394.5,
                      right: 150,
                      child: TextButton(

                          onPressed: (){},
                          child: Text('SUBSCRIBED',
                            style: TextStyle(

                                color: Colors.grey[600]
                            ),)
                      ),
                    )
                    // FlatButton(
                    //     color: Colors.red[600],
                    //     onPressed: (){}, child: Text('Subscribe'))
                  ],
                ),
              ),
            ),
          );
        }
      }


void imagePickerOption() {
    Get.bottomSheet(
      SingleChildScrollView(
        child: ClipRRect(
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(10.0),
            topRight: Radius.circular(10.0),
          ),
          child: Container(
            color: Colors.white,
            height: 250,
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  const Text(
                    "Pic Image From",
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(
                    height: 10,
                  ),
                  ElevatedButton.icon(
                    onPressed: () {

                    },
                    icon: const Icon(Icons.camera),
                    label: const Text("CAMERA"),
                  ),
                  ElevatedButton.icon(
                    onPressed: () {

                    },
                    icon: const Icon(Icons.image),
                    label: const Text("GALLERY"),
                  ),
                  const SizedBox(
                    height: 10,
                  ),
                  ElevatedButton.icon(
                    onPressed: () {
                      Get.back();
                    },
                    icon: const Icon(Icons.close),
                    label: const Text("CANCEL"),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

IMAGE PIKER:

import 'package:flutter/material.dart';

class image_picker extends StatefulWidget {
  const image_picker({Key? key}) : super(key: key);

  @override
  State<image_picker> createState() => _image_pickerState();
}

class _image_pickerState extends State<image_picker> {


  void show(){

}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: const Text('IMAGE PICKER'),
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          const SizedBox(
            height: 40,
          ),
          Align(
            alignment: Alignment.center,
            child: Stack(
              children: [
                Container(
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.black12, width: 4),
                    borderRadius: const BorderRadius.all(
                      Radius.circular(8),
                    ),
                  ),
                  child: Image.asset(
                    'image/empty.png',
                    width: 170,
                    height: 170,
                    fit: BoxFit.cover,
                  ),
                ),
                Positioned(
                  bottom: 0,
                  right: 5,
                  child: IconButton(
                    onPressed: (){

                    },
                    icon: const Icon(
                      Icons.add_a_photo_outlined,
                      color: Colors.blue,
                      size: 30,
                    ),
                  ),
                )
              ],
            ),
          ),
          const SizedBox(
            height: 20,
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: ElevatedButton.icon(
                onPressed: (){},
                icon: const Icon(Icons.add_a_photo_sharp),
                label: const Text('UPLOAD IMAGE')),
          )
        ],
      ),
    );


  }
}

CONTAINER:

   Container(
              height: 90,
              width: 700,
              margin: EdgeInsets.all(100),
              color: Colors.blue[200],
            ),

              padding: EdgeInsets.only(bottom: 80),


              import 'package:flutter/material.dart';

              class MyAppBar extends StatelessWidget {
                const MyAppBar({required this.title, Key? key}) : super(key: key);

                // Fields in a Widget subclass are always marked "final".

                final Widget title;

                @override
                Widget build(BuildContext context) {
                  return Container(
                    height: 56.0, // in logical pixels
                    padding: const EdgeInsets.symmetric(horizontal: 8.0),
                    decoration: BoxDecoration(color: Colors.blue[500]),
                    // Row is a horizontal, linear layout.
                    child: Row(
                      // <Widget> is the type of items in the list.
                      children: [
                        const IconButton(
                          icon: Icon(Icons.menu),
                          tooltip: 'Navigation menu',
                          onPressed: null, // null disables the button
                        ),
                        // Expanded expands its child
                        // to fill the available space.
                        Expanded(
                          child: title,
                        ),
                        const IconButton(
                          icon: Icon(Icons.search),
                          tooltip: 'Search',
                          onPressed: null,
                        ),
                      ],
                    ),
                  );
                }
              }

              class MyScaffold extends StatelessWidget {
                const MyScaffold({Key? key}) : super(key: key);

                @override
                Widget build(BuildContext context) {
                  // Material is a conceptual piece
                  // of paper on which the UI appears.
                  return Material(
                    // Column is a vertical, linear layout.
                    child: Column(
                      children: [
                        MyAppBar(
                          title: Text(
                            'Example title',
                            style: Theme.of(context) //
                                .primaryTextTheme
                                .headline6,
                          ),
                        ),
                        const Expanded(
                          child: Center(
                            child: Text('Hello, world!'),
                          ),
                        ),
                      ],
                    ),
                  );
                }
              }

              void main() {
                runApp(
                  const MaterialApp(
                    title: 'My app', // used by the OS task switcher
                    home: SafeArea(
                      child: MyScaffold(),
                    ),
                  ),
                );
              }



              import 'package:flutter/material.dart';

              class tryall extends StatefulWidget {
                const tryall({Key? key}) : super(key: key);

                @override
                State<tryall> createState() => _tryallState();
              }

              class _tryallState extends State<tryall> {
                @override
                Widget build(BuildContext context) {
                  return SafeArea(
                    child: Scaffold(
                      body: Column(
                        children: [
                          Container(
                            padding: EdgeInsets.all(10),
                            color: Colors.cyan[200],
                          ),
                        ],
                      ),
                    ),
                  );
                }
              }

                    // validator: (value){
                                          //   if (value == null || value.isEmpty){
                                          //     return 'Please enter some text';
                                          //   }
                                          //   return null;
                                          // },

                                          import 'package:flutter/material.dart';

                                          class DropDown extends StatefulWidget {
                                            const DropDown({Key? key}) : super(key: key);

                                            @override
                                            State<DropDown> createState() => _DropDownState();
                                          }

                                          class _DropDownState extends State<DropDown> {
                                            String? language;
                                            List items = ['Hindi', 'Gujrati', 'English'];

                                            @override
                                            Widget build(BuildContext context) {
                                              return Material(
                                                  child: Center(
                                                child: DropdownButton(
                                                  onChanged: (newvalue) {
                                                    setState(() {
                                                      language = newvalue as String?;
                                                    });
                                                  },
                                                  value: language,
                                                  isExpanded: true,
                                                  items: items.map((valueItem) {
                                                    return DropdownMenuItem(value: valueItem, child: Text(valueItem));
                                                  }).toList(),

                                                ),
                                              ));
                                            }
                                          }
 /*indicator: BoxDecoration(
                        borderRadius: BorderRadius.circular(50),
                      color: Colors.white
                    ),*/
                    // isScrollable:true,
                    // indicatorColor:Colors.white,
                    // indicatorSize: TabBarIndicatorSize.tab,
                    // indicatorWeight: 10,

                    import 'dart:async';
                    import 'dart:convert';

                    import 'package:flutter/material.dart';
                    import 'package:http/http.dart' as http;

                    Future<Album> fetchAlbum() async {
                      final response = await http
                          .get(Uri.parse('https://reqres.in/api/unknown'));

                      if (response.statusCode == 200) {
                        // If the server did return a 200 OK response,
                        // then parse the JSON.
                        return Album.fromJson(jsonDecode(response.body));
                      } else {
                        // If the server did not return a 200 OK response,
                        // then throw an exception.
                        throw Exception('Failed to load album');
                      }
                    }

                    class Album {
                      final int name;
                      final int year;
                      final String pantone_value;

                      const Album({
                        required this.name,
                        required this.year,
                        required this.pantone_value,
                      });

                      factory Album.fromJson(Map<String, dynamic> json) {
                        return Album(
                          name: json['name'],
                          year: json['year'],
                          pantone_value: json['pantone_value'],
                        );
                      }
                    }

                    void main() => runApp( Service());

                    class Service extends StatefulWidget {
                      const Service({Key? key}) : super(key: key);

                      @override
                      _ServiceState createState() => _ServiceState();
                    }

                    class _ServiceState extends State<Service> {
                      late Future<Album> futureAlbum;

                      @override
                      void initState() {
                        super.initState();
                        futureAlbum = fetchAlbum();
                      }

                      @override
                      Widget build(BuildContext context) {
                        return MaterialApp(
                          title: 'Fetch Data Example',
                          theme: ThemeData(
                            primarySwatch: Colors.blue,
                          ),
                          home: Scaffold(
                            appBar: AppBar(
                              title: const Text('Fetch Data Example'),
                            ),
                            body: Center(
                              child: FutureBuilder<Album>(
                                future: futureAlbum,
                                builder: (context, snapshot) {
                                  if (snapshot.hasData) {
                                    return Text(snapshot.data!.pantone_value);
                                  } else if (snapshot.hasError) {
                                    return Text('${snapshot.error}');
                                  }

                                  // By default, show a loading spinner.
                                  return const CircularProgressIndicator();
                                },
                              ),
                            ),
                          ),
                        );
                      }
                    }

                    ListView.builder(
                                    itemCount: snapshot.data!.length,
                                    itemBuilder: (BuildContext context,int index){
                                      return ListTile(
                                        title: Text(snapshot.data![index].name),
                                        subtitle: Text(snapshot.data![index].year),
                                      );
                                    });

                                    class Album {
                                      final int page;
                                      final int per_page;
                                      final int total;
                                      final int total_pages;
                                      final String data;
                                      final int id;
                                      final String name;
                                      final int year;
                                      final String color;
                                      final String pantone_value;

                                      const Album({

                                        required this.page,
                                        required this.per_page,
                                        required this.total,
                                        required this.total_pages,
                                        required this.data,
                                        required this.id,
                                        required this.name,
                                        required this.year,
                                        required this.color,
                                        required this.pantone_value,
                                      });

                                      factory Album.fromJson(Map<String, dynamic> json) {
                                        return Album(
                                          page: json['page'],
                                          per_page: json['per_page'],
                                          total: json['total'],
                                          total_pages: json['total_pages'],
                                          data: json['data'],
                                          id: json['id'],
                                          name: json['name'],
                                          year: json['year'],
                                          color: json['color'],
                                          pantone_value: json['pantone_value'],

                                        );
                                      }
                                    }


                                    class data{
                                      final int id;
                                      final String name;
                                      final int year;
                                      final String color;
                                      final String pantone_value;

                                      const data({
                                        required this.id,
                                        required this.name,
                                        required this.year,
                                        required this.color,
                                        required this.pantone_value,
                                      });

                                      factory data.fromJson(Map<String, dynamic> json) {
                                        return data(
                                          id: json['id'],
                                          name: json['name'],
                                          year: json['year'],
                                          color: json['color'],
                                          pantone_value: json['pantone_value'],
                                        );
                                      }

import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

Future<Album> fetchAlbum() async {
  final response = await http.get(Uri.parse('https://reqres.in/api/unknown/1'));

  if (response.statusCode == 200) {
    return Album.fromJson(jsonDecode(response.body));
  } else {
    throw Exception('Failed to load album');
  }
}

class Album {
  final int page;
  final int per_page;
  final int total;
  final int total_pages;
  final String data;
  final int id;
  final String name;
  final int year;
  final String color;
  final String pantone_value;

  const Album({

    required this.page,
    required this.per_page,
    required this.total,
    required this.total_pages,
    required this.data,
    required this.id,
    required this.name,
    required this.year,
    required this.color,
    required this.pantone_value,
  });

  factory Album.fromJson(Map<String, dynamic> json) {
    return Album(
      page: json['page'],
      per_page: json['per_page'],
      total: json['total'],
      total_pages: json['total_pages'],
      data: json['data'],
      id: json['id'],
      name: json['name'],
      year: json['year'],
      color: json['color'],
      pantone_value: json['pantone_value'],

    );
  }
}

void main() => runApp(const User());

class User extends StatefulWidget {
  const User({Key? key}) : super(key: key);

  @override
  _UserState createState() => _UserState();
}

class _UserState extends State<User> {
  late Future<Album> futureAlbum;

  @override
  void initState() {
    super.initState();
    futureAlbum = fetchAlbum();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: const Text('Fetch Data'),
      ),
      body: Center(
        child: FutureBuilder<Album>(
          future: futureAlbum,
          builder: (context, snapshot) {
            if (snapshot.hasData) {
              return Text(snapshot.data!.name);
            } else if (snapshot.hasError) {
              return Text('${snapshot.error}');
            }


            return const CircularProgressIndicator();
          },
        ),
      ),
    );
  }
}


print(gfg.split(""));
List<String> dateParts = color.split("#");

import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:practical_harsh/Model/user_profile.dart';
import 'package:practical_harsh/strings.dart';

import 'UserData.dart';

Future<UserData> fetchAlbum() async {
  final response = await http.get(Uri.parse('https://reqres.in/api/unknown'));

  if (response.statusCode == 200) {
    return UserData.fromJson(jsonDecode(response.body));
  } else {
    throw Exception(Strings.failed_to_load);
  }
}

class User extends StatefulWidget {
  const User({Key? key}) : super(key: key);

  @override
  _UserState createState() => _UserState();
}

class _UserState extends State<User> {
  late Future<UserData> futureAlbum;

  @override
  void initState() {
    super.initState();
    futureAlbum = fetchAlbum();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: Text(Strings.fetch_data),
      ),
      body: Center(
        child: FutureBuilder<UserData>(
          future: futureAlbum,
          builder: (context, snapshot) {
            if (snapshot.hasData) {
              return Container(
                child: ListView.builder(
                  itemCount:
                      snapshot.data == null ? 0 : snapshot.data?.data?.length,
                  itemBuilder: (context, index) {
                    var color = "0xFF" +
                        snapshot.data!.data![index].color!.substring(1, 7);
                    var value = Color(int.parse(color));
                    return Padding(
                      padding: const EdgeInsets.all(2.0),
                      child: Card(
                        child: ListTile(
                          onTap: () {
                            Navigator.of(context).push(MaterialPageRoute(
                                builder: (context) => UserProfile(snapshot.data)));
                          },
                          leading: (Icon(Icons.eleven_mp)),
                          title: Text(snapshot.data!.data![index].name!),
                          subtitle: Text(
                            snapshot.data!.data![index].year!.toString(),
                          ),
                          trailing: Padding(
                            padding: const EdgeInsets.all(15.0),
                            child: Container(
                              height: 60,
                              width: 75,
                              color: value,
                              child: Center(
                                child: Text(
                                  '${snapshot.data!.data![index].color?.substring(1, 7)}',
                                  style: TextStyle(
                                      fontWeight: FontWeight.bold,
                                      fontSize: 13),
                                ),
                              ),
                            ),
                          ),
                          isThreeLine: true,
                          dense: false,
                        ),
                      ),
                    );
                  },
                ),
              );
            } else if (snapshot.hasError) {
              return Text('110--${snapshot.error}');
            }

            return const CircularProgressIndicator();
          },
        ),
      ),
    );
  }
}


// Future<UserData> profileAlbum() async {
//   final response = await http.get(Uri.parse('https://reqres.in/api/unknown/id'));
//
//   if (response.statusCode == 200) {
//     return UserData.fromJson(jsonDecode(response.body));
//   } else {
//     throw Exception(Strings.failed_to_load);
//   }
// }
// class UserProfile extends StatefulWidget {
//   const UserProfile({Key? key}) : super(key: key);
//
//   @override
//   State<UserProfile> createState() => _UserProfileState();
// }
//
// class _UserProfileState extends State<UserProfile> {
//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         centerTitle: true,
//         title: Text("Profile"),
//       ),
//       body: Center(
//         child: FutureBuilder<UserData>(
//           future: profileAlbum(),
//           builder: (context, snapshot) {
//             if (snapshot.hasData) {
//               return Container(
//                 child: ListView.builder(
//                   // itemCount: 6,
//                   // itemCount:
//                   //     snapshot.data == null ? 0 : snapshot.data?.data?.length,
//                   itemBuilder: (context, index) {
//                     var color = "0xFF" +
//                         snapshot.data!.data![index].color!.substring(1, 7);
//                     var value = Color(int.parse(color));
//                     var user_id = Text(
//                       snapshot.data!.data![index].id.toString(),
//                       style: TextStyle(color: Colors.white),
//                     );
//                     var name = Text(
//                       snapshot.data!.data![index].name!.toString(),
//                       style: TextStyle(color: Colors.white),
//                     );
//                     var year = Text(
//                       snapshot.data!.data![index].year.toString(),
//                       style: TextStyle(color: Colors.white),
//                     );
//
//                     return Padding(
//                       padding: const EdgeInsets.all(8.0),
//                       child: Card(
//                         child: Container(
//                           color: value,
//                           child: Padding(
//                             padding: const EdgeInsets.all(30.0),
//                             child: Column(
//                               crossAxisAlignment: CrossAxisAlignment.start,
//                               children: <Widget>[user_id, name, year],
//                             ),
//                           ),
//                         ),
//                       ),
//                     );
//                   },
//                 ),
//               );
//             }
//     else
//     if (snapshot.hasError) {
//               return Text('110--${snapshot.error}');
//             }
//
//             return const CircularProgressIndicator();
//           },
//         ),
//       ),
//     );
//   }
// }
